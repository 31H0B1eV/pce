#*****************************************************************************
#* pce                                                                       *
#*****************************************************************************

#*****************************************************************************
#* File name:     configure.in                                               *
#* Created:       2002-05-20 by Hampa Hug <hampa@hampa.ch>                   *
#* Last modified: 2006-12-15 by Hampa Hug <hampa@hampa.ch>                   *
#* Copyright:     (C) 2002-2006 Hampa Hug <hampa@hampa.ch>                   *
#*****************************************************************************

#*****************************************************************************
#* This program is free software. You can redistribute it and / or modify it *
#* under the terms of the GNU General Public License version 2 as  published *
#* by the Free Software Foundation.                                          *
#*                                                                           *
#* This program is distributed in the hope  that  it  will  be  useful,  but *
#* WITHOUT  ANY   WARRANTY,   without   even   the   implied   warranty   of *
#* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU  General *
#* Public License for more details.                                          *
#*****************************************************************************

# $Id$


AC_PREREQ(2.50)

AC_INIT(pce)
AC_CONFIG_SRCDIR(Makefile.in)
AC_CONFIG_HEADER(src/config.h)


#-----------------------------------------------------------------------------
# package version

AC_MSG_CHECKING([pce version])
if test ! -r "$srcdir/version" ; then
	AC_MSG_RESULT([file 'version' not found in source directory])
	exit 1
fi
oldifs=$IFS
IFS="$IFS."
read p PCE_VERSION_MAJ PCE_VERSION_MIN PCE_VERSION_MIC dstr r < "$srcdir/version"
IFS=$oldifs
if test "x$dstr" != "x" ; then
	PCE_VERSION_REL=0
	if test "x$dstr" = "xcvs" ; then
		dstr=`date +%Y%m%d`
		PCE_VERSION_STR="cvs-$dstr"
	elif test "x$dstr" = "xsvn" ; then
		tmp=svninfo.$$.tmp
		svn info "$srcdir" > "$tmp" 2> /dev/null

		date=$(date "+%Y-%m-%d")
		rev=""

		while read a b c d e ; do
			case "$a$b$c$d" in
			"Revision:"*)
				rev="$b"
				;;
			"LastChangedDate:"*)
				date="$d"
				;;
			esac
		done < "$tmp"

		rm -f "$tmp"

		test -n "$rev" && rev="-r$rev"
		date=$(echo "$date" | sed -e "s/-//g")
		PCE_VERSION_STR="$date$rev"
	else
		PCE_VERSION_STR="$dstr"
	fi
else
	PCE_VERSION_REL=1
	PCE_VERSION_STR="$PCE_VERSION_MAJ.$PCE_VERSION_MIN.$PCE_VERSION_MIC"
fi
AC_SUBST(PCE_VERSION_MAJ)
AC_SUBST(PCE_VERSION_MIN)
AC_SUBST(PCE_VERSION_MIC)
AC_SUBST(PCE_VERSION_STR)
AC_SUBST(PCE_VERSION_REL)
AC_DEFINE_UNQUOTED(PCE_VERSION_MAJ, $PCE_VERSION_MAJ)
AC_DEFINE_UNQUOTED(PCE_VERSION_MIN, $PCE_VERSION_MIN)
AC_DEFINE_UNQUOTED(PCE_VERSION_MIC, $PCE_VERSION_MIC)
AC_DEFINE_UNQUOTED(PCE_VERSION_STR, "$PCE_VERSION_STR")
AC_DEFINE_UNQUOTED(PCE_VERSION_REL, $PCE_VERSION_REL)
AC_MSG_RESULT([$PCE_VERSION_STR])


#-----------------------------------------------------------------------------
# build time

AC_MSG_CHECKING([build time])
PCE_CFG_DATE=`date +%Y-%m-%d`
PCE_CFG_TIME=`date +%T`
AC_SUBST(PCE_CFG_DATE)
AC_SUBST(PCE_CFG_TIME)
AC_DEFINE_UNQUOTED(PCE_CFG_DATE, "$PCE_CFG_DATE")
AC_DEFINE_UNQUOTED(PCE_CFG_TIME, "$PCE_CFG_TIME")
AC_MSG_RESULT([$PCE_CFG_DATE $PCE_CFG_TIME])


#-----------------------------------------------------------------------------
# host

AC_CANONICAL_HOST

AC_MSG_CHECKING([host OS])
PCE_HOST_LINUX=0
PCE_HOST_SUNOS=0
case "$host_os" in
[[Ll]]inux*)
	PCE_HOST_LINUX=1
	AC_DEFINE(PCE_HOST_LINUX)
	AC_MSG_RESULT([Linux])
	;;
SunOS*)
	PCE_HOST_SUNOS=1
	AC_DEFINE(PCE_HOST_SUNOS)
	AC_MSG_RESULT([SunOS])
	;;
netbsd*)
	PCE_HOST_NETBSD=1
	AC_DEFINE(PCE_HOST_NETBSD)
	AC_MSG_RESULT([NetBSD])
	;;
*)
	AC_MSG_RESULT([unknown ($host_os)])
	;;
esac
AC_SUBST(PCE_HOST_LINUX)
AC_SUBST(PCE_HOST_SUNOS)
AC_SUBST(PCE_HOST_NETBSD)

AC_MSG_CHECKING([host cpu])
PCE_HOST_IA32=0
PCE_HOST_PPC=0
PCE_HOST_SPARC=0
case "$host_cpu" in
i?86)
	PCE_HOST_IA32=1
	AC_DEFINE(PCE_HOST_IA32)
	AC_MSG_RESULT([IA32])
	;;
powerpc*)
	PCE_HOST_PPC=1
	AC_DEFINE(PCE_HOST_PPC)
	AC_MSG_RESULT([powerpc])
	;;
sparc* | sun4*)
	PCE_HOST_SPARC=1
	AC_DEFINE(PCE_HOST_SPARC)
	AC_MSG_RESULT([sparc])
	;;
*)
	AC_MSG_RESULT([unknown ($host_cpu)])
	;;
esac
AC_SUBST(PCE_HOST_IA32)
AC_SUBST(PCE_HOST_PPC)
AC_SUBST(PCE_HOST_SPARC)


#-----------------------------------------------------------------------------
# Checks for programs

AC_PROG_CC
AC_PROG_INSTALL
case "$INSTALL" in
.*)
	d=`dirname "$INSTALL"`
	f=`basename "$INSTALL"`
	INSTALL=`cd "$d" && pwd`/"$f"
	;;
esac
AC_PATH_PROG(AR, ar, ar)
AC_PATH_PROG(GZ, gzip, gzip)
AC_PROG_MAKE_SET
AC_PROG_LN_S

AC_PATH_PROG(NASM, nasm,)
if test -x "$NASM" ; then
	PCE_HAVE_NASM=1
else
	PCE_HAVE_NASM=0
fi
AC_SUBST(PCE_HAVE_NASM)

AC_PATH_PROG(IHEX, ihex,)
if test -x "$IHEX" ; then
	PCE_HAVE_IHEX=1
else
	PCE_HAVE_IHEX=0
fi
AC_SUBST(PCE_HAVE_IHEX)


#-----------------------------------------------------------------------------
# Checks for header files.

AC_HEADER_STDC
AC_CHECK_HEADERS( \
	fcntl.h limits.h termios.h unistd.h \
	sys/ioctl.h sys/poll.h sys/socket.h sys/time.h \
	linux/if_tun.h
)

AC_CHECK_HEADER(stdint.h,
	[AC_DEFINE(HAVE_STDINT_H)
	PCE_HAVE_STDINT_H=1],
	PCE_HAVE_STDINT_H=0
)
AC_SUBST(PCE_HAVE_STDINT_H)

AC_CHECK_HEADER(inttypes.h,
	[AC_DEFINE(HAVE_INTTYPES_H)
	PCE_HAVE_INTTYPES_H=1],
	PCE_HAVE_INTTYPES_H=0
)
AC_SUBST(PCE_HAVE_INTTYPES_H)


#-----------------------------------------------------------------------------
# Checks for libraries

AC_FUNC_FSEEKO
AC_CHECK_FUNCS(sleep nanosleep usleep gettimeofday)

AC_PATH_X
if test "x$no_x" = "xyes" ; then
	PCE_X11_USE=0
	PCE_X11_CCF=""
	PCE_X11_LDF=""
else
	PCE_X11_USE=1
	if test -n "$x_includes" ; then
		PCE_X11_CCF="-I$x_includes"
	else
		PCE_X11_CCF=""
	fi
	if test -n "$x_libraries" ; then
		PCE_X11_LDF="-L$x_libraries -lX11"
	else
		PCE_X11_LDF="-lX11"
	fi
	AC_DEFINE(PCE_X11_USE)
fi
AC_SUBST(PCE_X11_USE)
AC_SUBST(PCE_X11_CCF)
AC_SUBST(PCE_X11_LDF)


AC_MSG_CHECKING([for SDL])
AC_ARG_WITH(sdl,
  AC_HELP_STRING([--with-sdl], [Build the SDL terminal]),
  [
	if test "x$withval" = "xno" ; then
		PCE_SDL_USE=0
		AC_MSG_RESULT([no (forced)])
	else
		PCE_SDL_USE=1
		AC_MSG_RESULT([yes (forced)])
	fi
  ],
  [
	if sdl-config --version > /dev/null 2>&1 ; then
		PCE_SDL_USE=1
		AC_MSG_RESULT([yes (detected)])
	else
		PCE_SDL_USE=0
		AC_MSG_RESULT([no (detected)])
	fi
  ]
)
if test "x$PCE_SDL_USE" != "x0" ; then
	PCE_SDL_CCF=`sdl-config --cflags`
	case "$LDFLAGS" in
	*-static*)
		PCE_SDL_LDF=`sdl-config --static-libs`
		;;
	*)
		PCE_SDL_LDF=`sdl-config --libs`
		;;
	esac
	AC_DEFINE(PCE_SDL_USE)
fi
AC_SUBST(PCE_SDL_USE)
AC_SUBST(PCE_SDL_CCF)
AC_SUBST(PCE_SDL_LDF)



#-----------------------------------------------------------------------------
# Checks for options

AC_ARG_ENABLE(largefile,
  AC_HELP_STRING([--disable-largefile], [Disable large file support]),
  opt_large=$enableval
)
if test "$opt_large" = "no" ; then
	PCE_LARGE_FILE="0"
else
	AC_DEFINE(PCE_LARGE_FILE)
	PCE_LARGE_FILE="1"
fi
AC_SUBST(PCE_LARGE_FILE)


if test -d "$srcdir/src/arch/ibmpc"; then have_ibmpc=1; else have_ibmpc=0; fi
if test -d "$srcdir/src/arch/sim405"; then have_sim405=1; else have_sim405=0; fi
if test -d "$srcdir/src/arch/sim6502"; then have_sim6502=1; else have_sim6502=0; fi
if test -d "$srcdir/src/arch/sim68k"; then have_sim68k=1; else have_sim68k=0; fi
if test -d "$srcdir/src/arch/simarm"; then have_simarm=1; else have_simarm=0; fi
if test -d "$srcdir/src/arch/sims32"; then have_sims32=1; else have_sims32=0; fi
if test -d "$srcdir/src/cpu/e8086"; then have_e8086=1; else have_e8086=0; fi
if test -d "$srcdir/src/cpu/e6502"; then have_e6502=1; else have_e6502=0; fi
if test -d "$srcdir/src/cpu/e68000"; then have_e68000=1; else have_e68000=0; fi
if test -d "$srcdir/src/cpu/arm"; then have_arm=1; else have_arm=0; fi
if test -d "$srcdir/src/cpu/ppc405"; then have_ppc405=1; else have_ppc405=0; fi
if test -d "$srcdir/src/cpu/sparc32"; then have_sparc32=1; else have_sparc32=0; fi


AC_MSG_CHECKING([whether to build the IBM PC emulator])
if test "x$have_ibmpc$have_e8086" != "x11" ; then
	PCE_BUILD_IBMPC=0
	AC_MSG_RESULT([no (no source)])
else
	AC_ARG_ENABLE(ibmpc,
	  AC_HELP_STRING([--enable-ibmpc], [Enable the IBM PC emulator]),
	  [
	  	if test "x$enableval" = "xyes" ; then
	  		PCE_BUILD_IBMPC=1
	  		AC_MSG_RESULT([yes (forced)])
	  	else
	  		PCE_BUILD_IBMPC=0
	  		AC_MSG_RESULT([no (forced)])
	  	fi
	  ],
	  [
	  	PCE_BUILD_IBMPC=1
		AC_MSG_RESULT([yes (default)])
	  ]
	)
fi
AC_SUBST(PCE_BUILD_IBMPC)
if test $PCE_BUILD_IBMPC -eq 1 ; then
	AC_DEFINE(PCE_BUILD_IBMPC)
fi


AC_MSG_CHECKING([whether to build the PPC405 simulator])
if test "x$have_sim405$have_ppc405" != "x11" ; then
	PCE_BUILD_SIM405=0
	AC_MSG_RESULT([no (no source)])
else
	AC_ARG_ENABLE(sim405,
	  AC_HELP_STRING([--enable-sim405], [Enable the PPC405 simulator]),
	  [
	  	if test "x$enableval" = "xyes" ; then
	  		PCE_BUILD_SIM405=1
	  		AC_MSG_RESULT([yes (forced)])
	  	else
	  		PCE_BUILD_SIM405=0
	  		AC_MSG_RESULT([no (forced)])
	  	fi
	  ],
	  [
	  	PCE_BUILD_SIM405=1
		AC_MSG_RESULT([yes (default)])
	  ]
	)
fi
AC_SUBST(PCE_BUILD_SIM405)
if test "x$PCE_BUILD_SIM405" = "x1" ; then
	AC_DEFINE(PCE_BUILD_SIM405)
fi


AC_MSG_CHECKING([whether to build the 6502 simulator])
if test "x$have_sim6502$have_e6502" != "x11" ; then
	PCE_BUILD_SIM6502=0
	AC_MSG_RESULT([no (no source)])
else
	AC_ARG_ENABLE(sim6502,
	  AC_HELP_STRING([--enable-sim6502], [Enable the 6502 simulator]),
	  [
	  	if test "x$enableval" = "xyes" ; then
	  		PCE_BUILD_SIM6502=1
	  		AC_MSG_RESULT([yes (forced)])
	  	else
	  		PCE_BUILD_SIM6502=0
	  		AC_MSG_RESULT([no (forced)])
	  	fi
	  ],
	  [
	  	PCE_BUILD_SIM6502=1
		AC_MSG_RESULT([yes (default)])
	  ]
	)
fi
AC_SUBST(PCE_BUILD_SIM6502)
if test "x$PCE_BUILD_SIM6502" = "x1" ; then
	AC_DEFINE(PCE_BUILD_SIM6502)
fi


AC_MSG_CHECKING([whether to build the 68000 simulator])
if test "x$have_sim68k$have_e68000" != "x11" ; then
	PCE_BUILD_SIM68K=0
	AC_MSG_RESULT([no (no source)])
else
	AC_ARG_ENABLE(sim68k,
	  AC_HELP_STRING([--enable-sim68k], [Enable the 68000 simulator]),
	  [
	  	if test "x$enableval" = "xyes" ; then
	  		PCE_BUILD_SIM68K=1
	  		AC_MSG_RESULT([yes (forced)])
	  	else
	  		PCE_BUILD_SIM68K=0
	  		AC_MSG_RESULT([no (forced)])
	  	fi
	  ],
	  [
	  	PCE_BUILD_SIM68K=1
		AC_MSG_RESULT([yes (default)])
	  ]
	)
fi
AC_SUBST(PCE_BUILD_SIM68K)
if test "x$PCE_BUILD_SIM68K" = "x1" ; then
	AC_DEFINE(PCE_BUILD_SIM68K)
fi


AC_MSG_CHECKING([whether to build the sparc32 simulator])
if test "x$have_sims32$have_sparc32" != "x11" ; then
	PCE_BUILD_SIMS32=0
	AC_MSG_RESULT([no (no source)])
else
	AC_ARG_ENABLE(sims32,
	  AC_HELP_STRING([--enable-sims32], [Enable the sparc32 simulator]),
	  [
	  	if test "x$enableval" = "xyes" ; then
	  		PCE_BUILD_SIMS32=1
	  		AC_MSG_RESULT([yes (forced)])
	  	else
	  		PCE_BUILD_SIMS32=0
	  		AC_MSG_RESULT([no (forced)])
	  	fi
	  ],
	  [
	  	PCE_BUILD_SIMS32=1
		AC_MSG_RESULT([yes (default)])
	  ]
	)
fi
AC_SUBST(PCE_BUILD_SIMS32)
if test "x$PCE_BUILD_SIMS32" = "x1" ; then
	AC_DEFINE(PCE_BUILD_SIMS32)
fi


AC_MSG_CHECKING([whether to build the arm simulator])
if test "x$have_simarm$have_arm" != "x11" ; then
	PCE_BUILD_SIMARM=0
	AC_MSG_RESULT([no (no source)])
else
	AC_ARG_ENABLE(simarm,
	  AC_HELP_STRING([--enable-simarm], [Enable the arm simulator]),
	  [
	  	if test "x$enableval" = "xyes" ; then
	  		PCE_BUILD_SIMARM=1
	  		AC_MSG_RESULT([yes (forced)])
	  	else
	  		PCE_BUILD_SIMARM=0
	  		AC_MSG_RESULT([no (forced)])
	  	fi
	  ],
	  [
	  	PCE_BUILD_SIMARM=1
		AC_MSG_RESULT([yes (default)])
	  ]
	)
fi
AC_SUBST(PCE_BUILD_SIMARM)
if test "x$PCE_BUILD_SIMARM" = "x1" ; then
	AC_DEFINE(PCE_BUILD_SIMARM)
fi


AC_MSG_CHECKING([whether to build the 6502 core])
if test "x$have_e6502" != "x1" ; then
	PCE_BUILD_6502=0
	AC_MSG_RESULT([no (no source)])
elif test "x$PCE_BUILD_SIM6502" = "x1" ; then
	PCE_BUILD_6502=1
	AC_MSG_RESULT([yes (required by sim6502)])
else
	AC_ARG_ENABLE(6502,
	  AC_HELP_STRING([--enable-6502], [Enable the 6502 core]),
	  [
	  	if test "x$enableval" = "xyes" ; then
	  		PCE_BUILD_6502=1
	  		AC_MSG_RESULT([yes (forced)])
	  	else
	  		PCE_BUILD_6502=0
	  		AC_MSG_RESULT([no (forced)])
	  	fi
	  ],
	  [
	  	PCE_BUILD_6502=0
		AC_MSG_RESULT([no (default)])
	  ]
	)
fi
AC_SUBST(PCE_BUILD_6502)
if test "x$PCE_BUILD_6502" = "x1" ; then
	AC_DEFINE(PCE_BUILD_6502)
fi


AC_MSG_CHECKING([whether to build the 68000 core])
if test "x$have_e68000" != "x1" ; then
	PCE_BUILD_68000=0
	AC_MSG_RESULT([no (no source)])
elif test "x$PCE_BUILD_SIM68K" = "x1" ; then
	PCE_BUILD_68000=1
	AC_MSG_RESULT([yes (required by sim68k)])
else
	AC_ARG_ENABLE(68000,
	  AC_HELP_STRING([--enable-68000], [Enable the 68000 core]),
	  [
	  	if test "x$enableval" = "xyes" ; then
	  		PCE_BUILD_68000=1
	  		AC_MSG_RESULT([yes (forced)])
	  	else
	  		PCE_BUILD_68000=0
	  		AC_MSG_RESULT([no (forced)])
	  	fi
	  ],
	  [
	  	PCE_BUILD_68000=0
		AC_MSG_RESULT([no (default)])
	  ]
	)
fi
AC_SUBST(PCE_BUILD_68000)
if test "x$PCE_BUILD_68000" = "x1" ; then
	AC_DEFINE(PCE_BUILD_68000)
fi


AC_MSG_CHECKING([whether to build the 8086 core])
if test "x$have_e8086" != "x1" ; then
	PCE_BUILD_8086=0
	AC_MSG_RESULT([no (no source)])
elif test $PCE_BUILD_IBMPC -eq 1 ; then
	PCE_BUILD_8086=1
	AC_MSG_RESULT([yes (required by ibmpc)])
else
	AC_ARG_ENABLE(8086,
	  AC_HELP_STRING([--enable-8086], [Enable the 8086 core]),
	  [
	  	if test "x$enableval" = "xyes" ; then
	  		PCE_BUILD_8086=1
	  		AC_MSG_RESULT([yes])
	  	else
	  		PCE_BUILD_8086=0
	  		AC_MSG_RESULT([no])
	  	fi
	  ],
	  [
	  	PCE_BUILD_8086=1
		AC_MSG_RESULT([yes])
	  ]
	)
fi
AC_SUBST(PCE_BUILD_8086)
if test "x$PCE_BUILD_8086" = "x1" ; then
	AC_DEFINE(PCE_BUILD_8086)
fi


AC_MSG_CHECKING([whether to build the arm core])
if test "x$have_arm" = "x0" ; then
	PCE_BUILD_ARM=0
	AC_MSG_RESULT([no (no source)])
elif test "x$PCE_BUILD_SIMARM" = "x1" ; then
	PCE_BUILD_ARM=1
	AC_MSG_RESULT([yes (required by simarm)])
else
	AC_ARG_ENABLE(arm,
	  AC_HELP_STRING([--enable-arm], [Enable the arm core]),
	  [
	  	if test "x$enableval" = "xyes" ; then
	  		PCE_BUILD_ARM=1
	  		AC_MSG_RESULT([yes (forced)])
	  	else
	  		PCE_BUILD_ARM=0
	  		AC_MSG_RESULT([no (forced)])
	  	fi
	  ],
	  [
	  	PCE_BUILD_ARM=0
		AC_MSG_RESULT([no (default)])
	  ]
	)
fi
AC_SUBST(PCE_BUILD_ARM)
if test "x$PCE_BUILD_ARM" = "x1" ; then
	AC_DEFINE(PCE_BUILD_ARM)
fi


AC_MSG_CHECKING([whether to build the ppc405 core])
if test "x$have_ppc405" = "x0" ; then
	PCE_BUILD_PPC405=0
	AC_MSG_RESULT([no (no source)])
elif test "x$PCE_BUILD_SIM405" = "x1" ; then
	PCE_BUILD_PPC405=1
	AC_MSG_RESULT([yes (required by sim405)])
else
	AC_ARG_ENABLE(ppc405,
	  AC_HELP_STRING([--enable-ppc405], [Enable the PowerPC 405 core]),
	  [
	  	if test "x$enableval" = "xyes" ; then
	  		PCE_BUILD_PPC405=1
	  		AC_MSG_RESULT([yes (forced)])
	  	else
	  		PCE_BUILD_PPC405=0
	  		AC_MSG_RESULT([no (forced)])
	  	fi
	  ],
	  [
	  	PCE_BUILD_PPC405=0
		AC_MSG_RESULT([no (default)])
	  ]
	)
fi
AC_SUBST(PCE_BUILD_PPC405)
if test "x$PCE_BUILD_PPC405" = "x1" ; then
	AC_DEFINE(PCE_BUILD_PPC405)
fi


AC_MSG_CHECKING([whether to build the sparc32 core])
if test "x$have_sparc32" = "x0" ; then
	PCE_BUILD_SPARC32=0
	AC_MSG_RESULT([no (no source)])
elif test "x$PCE_BUILD_SIMS32" = "x1" ; then
	PCE_BUILD_SPARC32=1
	AC_MSG_RESULT([yes (required by sims32)])
else
	AC_ARG_ENABLE(sparc32,
	  AC_HELP_STRING([--enable-sparc32], [Enable the sparc32 core]),
	  [
	  	if test "x$enableval" = "xyes" ; then
	  		PCE_BUILD_SPARC32=1
	  		AC_MSG_RESULT([yes (forced)])
	  	else
	  		PCE_BUILD_SPARC32=0
	  		AC_MSG_RESULT([no (forced)])
	  	fi
	  ],
	  [
	  	PCE_BUILD_SPARC32=0
		AC_MSG_RESULT([no (default)])
	  ]
	)
fi
AC_SUBST(PCE_BUILD_SPARC32)
if test "x$PCE_BUILD_SPARC32" = "x1" ; then
	AC_DEFINE(PCE_BUILD_SPARC32)
fi


# Don't know how to autodetect this properly.
AC_MSG_CHECKING([whether to enable tun])
AC_ARG_ENABLE(tun,
  AC_HELP_STRING([--enable-tun], [Enable tun networking]),
  [
  	if test "x$enableval" = "xyes" ; then
  		PCE_ENABLE_TUN=1
  		AC_MSG_RESULT([yes])
  	else
  		PCE_ENABLE_TUN=0
  		AC_MSG_RESULT([no])
  	fi
  ],
  [
  	h1=$ac_cv_header_linux_if_tun_h
  	h2=$ac_cv_header_sys_ioctl_h
  	h3=$ac_cv_header_sys_poll_h
  	h4=$ac_cv_header_sys_socket_h
  	if test "x$h1" = "xyes" -a "x$h2" = "xyes" -a "x$h3" = "xyes" -a "x$h4" = "xyes" ; then
  		PCE_ENABLE_TUN=1
  		AC_MSG_RESULT([yes (guess)])
  	else
	  	PCE_ENABLE_TUN=0
		AC_MSG_RESULT([no (guess)])
	fi
  ]
)
AC_SUBST(PCE_ENABLE_TUN)
if test "x$PCE_ENABLE_TUN" = "x1" ; then
	AC_DEFINE(PCE_ENABLE_TUN)
fi


# Don't know how to autodetect this properly.
AC_MSG_CHECKING([whether to enable serial port emulation])
AC_ARG_ENABLE(serport,
  AC_HELP_STRING([--enable-serport], [Enable serial port emulation]),
  [
  	if test "x$enableval" = "xyes" ; then
  		PCE_ENABLE_SERPORT=1
  		AC_MSG_RESULT([yes])
  	else
  		PCE_ENABLE_SERPORT=0
  		AC_MSG_RESULT([no])
  	fi
  ],
  [
  	h1=$ac_cv_header_termios_h
  	h2=$ac_cv_header_sys_ioctl_h
  	h3=$ac_cv_header_sys_poll_h
  	h4=$ac_cv_header_unistd_h
  	if test "x$h1" = "xyes" -a "x$h2" = "xyes" -a "x$h3" = "xyes" -a "x$h4" = "xyes" ; then
  		PCE_ENABLE_SERPORT=1
  		AC_MSG_RESULT([yes (guess)])
  	else
	  	PCE_ENABLE_SERPORT=0
		AC_MSG_RESULT([no (guess)])
	fi
  ]
)
AC_SUBST(PCE_ENABLE_SERPORT)
if test "x$PCE_ENABLE_SERPORT" = "x1" ; then
	AC_DEFINE(PCE_ENABLE_SERPORT)
fi


eval "pce_etcdir=$sysconfdir"
eval "pce_etcdir=$pce_etcdir"

eval "pce_datdir=$datadir"
eval "pce_datdir=$pce_datdir"

PCE_DIR_ETC=$pce_etcdir
PCE_DIR_DATA=$pce_datdir

AC_SUBST(PCE_DIR_ETC)
AC_SUBST(PCE_DIR_DATA)
AC_DEFINE_UNQUOTED(PCE_DIR_ETC, "$pce_etcdir")
AC_DEFINE_UNQUOTED(PCE_DIR_DATA, "$pce_datdir")


dnl --------------------------------------------------------------------------

extra=""
core1=""
core2=""
emu1=""
emu2=""

if test "x$PCE_BUILD_IBMPC" = "x1" ; then
	extra="$extra src/arch/ibmpc/Makefile"
	extra="$extra src/arch/ibmpc/bios/Makefile"
	extra="$extra src/arch/ibmpc/pceutils/Makefile"
	emu1="$emu1 ibmpc"
else
	emu2="$emu2 ibmpc"
fi

if test "x$PCE_BUILD_SIM405" = "x1" ; then
	extra="$extra src/arch/sim405/Makefile"
	emu1="$emu1 sim405"
else
	emu2="$emu2 sim405"
fi

if test "x$PCE_BUILD_SIM6502" = "x1" ; then
	extra="$extra src/arch/sim6502/Makefile"
	emu1="$emu1 sim6502"
else
	emu2="$emu2 sim6502"
fi

if test "x$PCE_BUILD_SIM68K" = "x1" ; then
	extra="$extra src/arch/sim68k/Makefile"
	emu1="$emu1 sim68k"
else
	emu2="$emu2 sim68k"
fi

if test "x$PCE_BUILD_SIMARM" = "x1" ; then
	extra="$extra src/arch/simarm/Makefile"
	emu1="$emu1 simarm"
else
	emu2="$emu2 simarm"
fi

if test "x$PCE_BUILD_SIMS32" = "x1" ; then
	extra="$extra src/arch/sims32/Makefile"
	emu1="$emu1 sims32"
else
	emu2="$emu2 sims32"
fi

if test "x$PCE_BUILD_6502" = "x1" ; then
	extra="$extra src/cpu/e6502/Makefile"
	core1="$core1 6502"
else
	core2="$core2 6502"
fi

if test "x$PCE_BUILD_68000" = "x1" ; then
	extra="$extra src/cpu/e68000/Makefile"
	core1="$core1 68000"
else
	core2="$core2 68000"
fi

if test "x$PCE_BUILD_8086" = "x1" ; then
	extra="$extra src/cpu/e8086/Makefile"
	core1="$core1 8086"
else
	core2="$core2 8086"
fi

if test "x$PCE_BUILD_ARM" = "x1" ; then
	extra="$extra src/cpu/arm/Makefile"
	core1="$core1 arm"
else
	core2="$core2 arm"
fi

if test "x$PCE_BUILD_PPC405" = "x1" ; then
	extra="$extra src/cpu/ppc405/Makefile"
	core1="$core1 ppc405"
else
	core2="$core2 ppc405"
fi

if test "x$PCE_BUILD_SPARC32" = "x1" ; then
	extra="$extra src/cpu/sparc32/Makefile"
	core1="$core1 sparc32"
else
	core2="$core2 sparc32"
fi


term1=" null vt100"
term2=""

if test "x$PCE_X11_USE" = "x1" ; then
	term1="$term1 x11"
else
	term2="$term2 x11"
fi

if test "x$PCE_SDL_USE" = "x1" ; then
	term1="$term1 sdl"
else
	term2="$term2 sdl"
fi


option1=""
option2=""

if test "x$PCE_ENABLE_SERPORT" = "x1" ; then
	option1="$option1 serport"
else
	option2="$option2 serport"
fi

if test "x$PCE_ENABLE_TUN" = "x1" ; then
	option1="$option1 tun"
else
	option2="$option2 tun"
fi


AC_OUTPUT(
  Makefile
  config.inc
  rules.inc
  src/Makefile
  src/arch/Makefile
  src/chipset/Makefile
  src/chipset/82xx/Makefile
  src/chipset/clock/Makefile
  src/chipset/ppc405/Makefile
  src/cpu/Makefile
  src/cpu/e8086/Makefile
  src/devices/Makefile
  src/devices/block/Makefile
  src/devices/clock/Makefile
  src/devices/video/Makefile
  src/lib/Makefile
  src/libini/Makefile
  src/terminal/Makefile
  src/utils/Makefile
  src/utils/pceimg/Makefile
  src/config.inc
  $extra
)


#-----------------------------------------------------------------------------
# info

echo ""
echo "pce $PCE_VERSION_STR is now configured:"

echo "  CC:                    $CC $CFLAGS"
echo "  LD:                    $CC $LDFLAGS"
echo ""
echo "  prefix:                $prefix"
echo ""
echo "  Emulators built:      $emu1"
echo "  Emulators not built:  $emu2"
echo "  CPU cores built:      $core1"
echo "  CPU cores not built:  $core2"
echo "  Terminals built:      $term1"
echo "  Terminals not built:  $term2"
echo "  Enabled options:      $option1"
echo "  Disabled options:     $option2"

if test "x$PCE_HAVE_NASM" = "x0" ; then
	echo "  Build PC BIOS:         no"
else
	echo "  Build PC BIOS:         yes"
fi
